#+title: Оптимизации в Common Lisp
#+author: Dmitry Ignatiev
#+date: 2024-12-01
#+language: ru

* Вступление

Рассказать почему оптимизация это важно, и немножко про историю лиспов

* Оптимизация программ

** Утилиты

*** time

*** disassemble

*** sb-profile

*** sb-sprof

** Оптимизации алгоритмов и структур данных

*** Фибоначчи: рекурсия -> мемоизация, цикл

Преобразование рекурсивной ф. Фибоначчи.

*** Вектор, хэш-таблица и множественные значения вместо списков

** Динамические vs статические переменные

** Декларации

Рассказать про ~declaim~, ~proclaim~ и ~declare~

*** Декларации оптимизации

Рассказать про ~(declare (optimize ...))~

*** Декларации типов

1) Рассказать про ~(the ...)~

2) Рассказать про ~(declare (type ...))~

** Оптимизация памяти

*** Удаление аллокаций

1) Символы вместо строк для идентификаторов

2) Мутабельность/Отказ от ФП

3) Буферизация и переиспользование буферов и препросчитанных таблиц
   (показать кодировки в babel)

4) Использование fixnum, и single-float вместо более "широких" типов
   (рассказать про метки типов и представление объектов)

5) dynamic-extent

6) ~(load-time-value )~

*** Специализированные массивы

Не забыть про ~(upgraded-array-element-type ...)~

*** Удаление боксинга

1) Рассказать про хранение в массивах и структурах
   (рассказать про доступ к массиву)

2) Рассказать про инлайн
   (в т.ч. про инлайн стандартных функций)

3) Локальные вызовы и блочная компиляция

*** Избавление от косвенных ссылок

Простые массивы vs с указателем заполнения или многомерные
(показать определение базовых объектов в SBCL)

** Вычисления времени компиляции

*** Вычисления констант

*** Макросы компилятора

** SBCL/deftransform

** SBCL/VOP
